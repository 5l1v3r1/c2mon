/******************************************************************************
 * This file is part of the Technical Infrastructure Monitoring (TIM) project.
 * See http://ts-project-tim.web.cern.ch
 * 
 * Copyright (C) 2004 - 2011 CERN This program is free software; you can
 * redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version. This program is distributed
 * in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received
 * a copy of the GNU General Public License along with this program; if not,
 * write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 * 
 * Author: TIM team, tim.support@cern.ch
 *****************************************************************************/
package cern.c2mon.client.history.updates;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;

import cern.c2mon.client.common.history.HistoryTagValueUpdate;
import cern.c2mon.client.common.history.id.HistoryUpdateId;
import cern.c2mon.client.common.history.id.TagValueUpdateId;
import cern.c2mon.shared.client.alarm.AlarmValue;
import cern.c2mon.shared.client.tag.TagMode;
import cern.c2mon.shared.client.tag.TagValueUpdate;
import cern.tim.shared.common.datatag.DataTagQuality;

/**
 * Implementation of the {@link TagValueUpdate}
 * 
 * @author vdeila
 * 
 */
public class HistoryTagValueUpdateImpl implements HistoryTagValueUpdate {

  /** the id */
  private final TagValueUpdateId id;

  /** the DataTagQuality object for this data tag. */
  private final DataTagQuality dataTagQuality;

  /** the tag value */
  private final Object value;

  /**
   * This timestamp indicates when the tag value event was generated by the
   * source.
   */
  private final Timestamp sourceTimestamp;

  /**
   * This timestamp indicates when the tag value passed the server. Please
   * notice that the source timestamp and server timestamp might be the same in
   * case that the value change event was generated by the server itself.
   */
  private final Timestamp serverTimestamp;

  /** The time the record were put into the database */
  private final Timestamp logTimestamp;
  
  /** the tag value description */
  private final String description;

  /**
   * The collection of registered alarms or an empty list, if no alarm is
   * defined
   */
  private final Collection<AlarmValue> alarms;

  /** the current mode of the tag. */
  private final TagMode mode;

  /**
   * <code>true</code>, if the tag value is currently simulated and not
   * corresponding to a live event.
   */
  private final boolean isSimulated;

  /** The data type of the value */
  private String dataType;

  /** The daq time */
  private Timestamp daqTimestamp;

  /**
   * 
   * @param tagId
   *          the tag identifier
   * @param dataTagQuality
   *          the DataTagQuality object for this data tag.
   * @param value
   *          the tag value
   * @param sourceTimestamp
   *          This timestamp indicates when the tag value event was generated by
   *          the source.
   * @param serverTimestamp
   *          This timestamp indicates when the tag value passed the server.
   *          Please notice that the source timestamp and server timestamp might
   *          be the same in case that the value change event was generated by
   *          the server itself.
   * @param logTimestamp
   *          The time the record were put into the database
   * @param description
   *          the tag value description
   * @param alarms
   *          The collection of registered alarms or an empty list, if no alarm
   *          is defined
   * @param mode
   *          the current mode of the tag.
   */
  public HistoryTagValueUpdateImpl(final Long tagId, final DataTagQuality dataTagQuality, final Object value, final Timestamp sourceTimestamp,
      final Timestamp serverTimestamp, final Timestamp logTimestamp, final String description, final AlarmValue[] alarms, final TagMode mode) {
    this.id = new TagValueUpdateId(tagId);
    this.dataTagQuality = dataTagQuality;
    this.value = value;
    this.sourceTimestamp = sourceTimestamp;
    this.serverTimestamp = serverTimestamp;
    this.logTimestamp = logTimestamp;
    this.description = description;
    this.mode = mode;
    this.isSimulated = false;
    this.alarms = new ArrayList<AlarmValue>();
    if (alarms != null) {
      this.alarms.addAll(Arrays.asList(alarms));
    }
    this.dataType = null;
    this.daqTimestamp = null;
  }

  /**
   * 
   * @param tagId
   *          the tag identifier
   * @param dataTagQuality
   *          the DataTagQuality object for this data tag.
   * @param value
   *          the tag value
   * @param sourceTimestamp
   *          This timestamp indicates when the tag value event was generated by
   *          the source.
   * @param serverTimestamp
   *          This timestamp indicates when the tag value passed the server.
   *          Please notice that the source timestamp and server timestamp might
   *          be the same in case that the value change event was generated by
   *          the server itself.
   * @param logTimestamp
   *          The time the record were put into the database
   * @param description
   *          the tag value description
   * @param mode
   *          the current mode of the tag.
   */
  public HistoryTagValueUpdateImpl(final Long tagId, final DataTagQuality dataTagQuality, final Object value, final Timestamp sourceTimestamp,
      final Timestamp serverTimestamp, final Timestamp logTimestamp, final String description, final TagMode mode) {
    this(tagId, dataTagQuality, value, sourceTimestamp, serverTimestamp, logTimestamp, description, null, mode);
  }
  
  /**
   * 
   * @param tagValueUpdate the value to copy
   */
  public HistoryTagValueUpdateImpl(final TagValueUpdate tagValueUpdate) {
    this(
        tagValueUpdate.getId(), 
        tagValueUpdate.getDataTagQuality(), 
        tagValueUpdate.getValue(), 
        tagValueUpdate.getSourceTimestamp(), 
        tagValueUpdate.getServerTimestamp(), 
        null,
        tagValueUpdate.getDescription(), 
        tagValueUpdate.getAlarms().toArray(new AlarmValue[0]), 
        tagValueUpdate.getMode());
    if (tagValueUpdate instanceof HistoryTagValueUpdateImpl) {
      this.dataType = ((HistoryTagValueUpdateImpl) tagValueUpdate).getDataType();
    }
  }

  @Override
  public Collection<AlarmValue> getAlarms() {
    return this.alarms;
  }

  @Override
  public DataTagQuality getDataTagQuality() {
    return this.dataTagQuality;
  }

  @Override
  public String getDescription() {
    return this.description;
  }

  @Override
  public Long getId() {
    return this.id.getTagId();
  }

  @Override
  public TagMode getMode() {
    return this.mode;
  }

  @Override
  public Timestamp getServerTimestamp() {
    return this.serverTimestamp;
  }

  /**
   * @return the logTimestamp
   */
  public Timestamp getLogTimestamp() {
    return logTimestamp;
  }

  @Override
  public Timestamp getSourceTimestamp() {
    return this.sourceTimestamp;
  }

  @Override
  public Object getValue() {
    return this.value;
  }

  @Override
  public boolean isSimulated() {
    return this.isSimulated;
  }

  /**
   * @return the dataType
   */
  @Override
  public String getDataType() {
    return dataType;
  }

  /**
   * @param dataType the dataType to set
   */
  public void setDataType(final String dataType) {
    this.dataType = dataType;
  }

  /**
   * @return the string representation of the object
   */
  @Override
  public String toString() {
    return String.format("Id: %d, Logdate: %s, ServerTime: %s", getId(), getLogTimestamp().toString(), getServerTimestamp().toString());
  }

  /**
   * 
   * @return the time of when this update should execute
   */
  @Override
  public Timestamp getExecutionTimestamp() {
    return getServerTimestamp();
  }

  @Override
  public HistoryUpdateId getDataId() {
    return this.id;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((alarms == null) ? 0 : alarms.hashCode());
    result = prime * result + ((dataTagQuality == null) ? 0 : dataTagQuality.hashCode());
    result = prime * result + ((dataType == null) ? 0 : dataType.hashCode());
    result = prime * result + ((description == null) ? 0 : description.hashCode());
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + (isSimulated ? 1231 : 1237);
    result = prime * result + ((mode == null) ? 0 : mode.hashCode());
    result = prime * result + ((serverTimestamp == null) ? 0 : serverTimestamp.hashCode());
    result = prime * result + ((sourceTimestamp == null) ? 0 : sourceTimestamp.hashCode());
    result = prime * result + ((value == null) ? 0 : value.hashCode());
    return result;
  }

  @Override
  public boolean equals(final Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (!(obj instanceof HistoryTagValueUpdateImpl))
      return false;
    HistoryTagValueUpdateImpl other = (HistoryTagValueUpdateImpl) obj;
    if (alarms == null) {
      if (other.alarms != null)
        return false;
    }
    else if (!alarms.equals(other.alarms))
      return false;
    if (dataTagQuality == null) {
      if (other.dataTagQuality != null)
        return false;
    }
    else if (!dataTagQuality.equals(other.dataTagQuality))
      return false;
    if (dataType == null) {
      if (other.dataType != null)
        return false;
    }
    else if (!dataType.equals(other.dataType))
      return false;
    if (description == null) {
      if (other.description != null)
        return false;
    }
    else if (!description.equals(other.description))
      return false;
    if (id == null) {
      if (other.id != null)
        return false;
    }
    else if (!id.equals(other.id))
      return false;
    if (isSimulated != other.isSimulated)
      return false;
    if (mode == null) {
      if (other.mode != null)
        return false;
    }
    else if (!mode.equals(other.mode))
      return false;
    if (serverTimestamp == null) {
      if (other.serverTimestamp != null)
        return false;
    }
    else if (!serverTimestamp.equals(other.serverTimestamp))
      return false;
    if (sourceTimestamp == null) {
      if (other.sourceTimestamp != null)
        return false;
    }
    else if (!sourceTimestamp.equals(other.sourceTimestamp))
      return false;
    if (value == null) {
      if (other.value != null)
        return false;
    }
    else if (!value.equals(other.value))
      return false;
    return true;
  }

  @Override
  public Timestamp getDaqTimestamp() {
    return this.daqTimestamp;
  }

  /**
   * @param daqTimestamp the daq time to set
   */
  public void setDaqTimestamp(final Timestamp daqTimestamp) {
    this.daqTimestamp = daqTimestamp;
  }

}
