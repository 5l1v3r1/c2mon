/******************************************************************************
 * Copyright (C) 2010-2016 CERN. All rights not expressly granted are reserved.
 * 
 * This file is part of the CERN Control and Monitoring Platform 'C2MON'.
 * C2MON is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the license.
 * 
 * C2MON is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
 * more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with C2MON. If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************/
package cern.c2mon.shared.client.tag;

import java.io.StringReader;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import cern.c2mon.shared.client.alarm.AlarmValue;
import cern.c2mon.shared.client.alarm.AlarmValueImpl;
import cern.c2mon.shared.client.request.ClientRequestReport;
import cern.c2mon.shared.common.datatag.DataTagQuality;
import cern.c2mon.shared.common.datatag.DataTagQualityImpl;
import cern.c2mon.shared.util.json.GsonFactory;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.gson.stream.JsonReader;


/**
 * This class implements the <code>TransferTagValue</code> interface. It is 
 * used for sending tag value update to the client layer. Please note that this
 * class contains only fields that can be changed by the source. All static tag
 * specification fields are defined by <code>TransferTagImpl</code> and sent in
 * a separate message.
 *
 * @author Matthias Braeger
 * @see TagValueUpdate
 */
public class TransferTagValueImpl extends ClientRequestReport implements TagValueUpdate {
  
  /** LOG4J logger instance */
  private static final transient Logger LOG = LoggerFactory.getLogger(TransferTagValueImpl.class);
  
  /** Gson parser singleton */
  private static transient Gson gson = null;
  
  /**
   * This helper variable is used to determine whether
   * the tagvalue is already deserialized or not.
   */
  private transient boolean tagValueDeserialized = false;
  
  /** The unique tag id */
  @NotNull @Min(1)
  private final Long tagId;
  
  /** The class type of the tag value as String representation */
  private String valueClassName;
  
  /** The value of the tag */
  private String tagValue;
  
  /** The deserialized value */
  private transient Object tagValueAsObject;
  
  /** The current tag mode */
  @NotNull
  private final TagMode mode;
  
  /** 
   * <code>true</code>, if the tag value is currently simulated and not
   * corresponding to a live event.
   */
  private boolean simulated = false;
  
  /** Collection of <code>AlarmValue</code> objects */
  private final Collection<AlarmValueImpl> alarmValues = new ArrayList<AlarmValueImpl>();
  
  /** The quality of the tag */
  @NotNull
  private final DataTagQualityImpl tagQuality;
  
  /** The tag description */
  private String description;
  
  /** The current tag value description */
  private String valueDescription;
  
  /** 
   * The source timestamp that indicates when the value change was generated.
   * This timestamp can be null, if the change message was generated by the DAQ or
   * by the server itself (usually error message).
   */
  @Past
  private final Timestamp sourceTimestamp;
  
  /** 
   * The DAQ timestamp that indicates when the change message was sent from the DAQ module.
   * This timestamp can be null, if the change message was generated by the server (usually
   * error message).
   */
  @Past
  private final Timestamp daqTimestamp;
  
  /** The server timestamp that indicates when the change message passed the server */
  @NotNull @Past
  private final Timestamp serverTimestamp;
  
  /**
   * @return The Gson parser singleton instance to serialize/deserialize Json
   * messages of that class
   */
  public static synchronized Gson getGson() {
    if (gson == null) {
      gson = GsonFactory.createGsonBuilder().create();            
    }    
    return gson;
  }
  
  /**
   * Hidden Constructor used by JSON
   */
  @SuppressWarnings("unused")
  private TransferTagValueImpl() {
    this(null, null, null, null, null, null, null, null, null);
  }
  
  /**
   * Default Constructor
   * 
   * @param pTagId The unique tag id
   * @param pTagValue actual tag value (must be String or Number)
   * @param pTagQuality The quality of the tag
   * @param pSourceTimestamp The source timestamp that indicates when the value change was generated
   * @param pDaqTimestamp The DAQ timestamp that indicates when the value change message has been sent from the DAQ
   * @param pServerTimestamp The server timestamp that indicates when the change message passed the server
   * @param pDescription The tag description
   * @param pValueDescription The current tag value description
   */
  public TransferTagValueImpl(final Long pTagId,
                              final Object pTagValue,
                              final String pValueDescription,
                              final DataTagQualityImpl pTagQuality,
                              final TagMode pMode,
                              final Timestamp pSourceTimestamp,
                              final Timestamp pDaqTimestamp,
                              final Timestamp pServerTimestamp,
                              final String pDescription) {    
    tagId = pTagId;    
    if (pTagValue != null) {
      if (!(pTagValue instanceof Number || pTagValue instanceof String || pTagValue instanceof Boolean)) {
        throw new IllegalArgumentException("This class only supports numeric types and Strings");
      }
      tagValue = pTagValue.toString();
      tagValueDeserialized  = false; 
      valueClassName = pTagValue.getClass().getName();
    }
    tagQuality = pTagQuality;
    this.mode = pMode;
    sourceTimestamp = pSourceTimestamp;
    daqTimestamp = pDaqTimestamp;
    serverTimestamp = pServerTimestamp;
    description = pDescription;
    valueDescription = pValueDescription;
  }

  
  /**
   * Adds the given alarm value to the transfer tag, except if an alarm with the same ID
   * id already present or, if the alarm value does not belong to the specified tag.
   * @param alarmValue The alarm value to be added
   * @return <code>true</code>, if the alarm was successfully added to this tag
   */
  public final boolean addAlarmValue(@Valid final AlarmValueImpl alarmValue) {
    if (alarmValue.getTagId().equals(tagId)) {
      return alarmValues.add(alarmValue);
    }
    
    return false;
  }
  
  
  /**
   * Adds the given alarm values to the transfer tag, except if an alarm with the same ID
   * id already present or, if the alarm values do not belong to the specified tag.
   * @param alarmValues The alarm values to be added
   */
  public final void addAlarmValues(final List<AlarmValueImpl> alarmValues) {
    if (alarmValues != null) {
      for (AlarmValueImpl alarmValue : alarmValues) {
        if (alarmValue != null) {
          addAlarmValue(alarmValue);
        }
      }
    }
  }


  /**
   * @see cern.c2mon.shared.client.tag.TagValueUpdate#getAlarms()
   */
  @Override
  public final Collection<AlarmValue> getAlarms() {
    return new ArrayList<AlarmValue>(alarmValues);
  }

  /**
   * @see cern.c2mon.shared.client.tag.TagValueUpdate#getDataTagQuality()
   */
  @Override
  public final DataTagQuality getDataTagQuality() {
    return tagQuality;
  }

  /**
   * @see cern.c2mon.shared.client.tag.TagValueUpdate#getDescription()
   */
  @Override
  public final String getDescription() {
    return description;
  }

  /**
   * @see cern.c2mon.shared.client.tag.TagValueUpdate#getId()
   */
  @Override
  public final Long getId() {
    return tagId;
  }

  /**
   * @see cern.c2mon.shared.client.tag.TagValueUpdate#getServerTimestamp()
   */
  @Override
  public final Timestamp getServerTimestamp() {
    return serverTimestamp;
  }
  
  /**
   * @see cern.c2mon.shared.client.tag.TagValueUpdate#getDaqTimestamp()
   */
  @Override
  public final Timestamp getDaqTimestamp() {
    return daqTimestamp;
  }

  /**
   * @see cern.c2mon.shared.client.tag.TagValueUpdate#getSourceTimestamp()
   */
  @Override
  public final Timestamp getSourceTimestamp() {
    return sourceTimestamp;
  }

  /**
   * Returns the value of the tag. In case that the instance of this class was 
   * generated by Json, the returning is deserialized and casted back to its
   * original object class. 
   *  
   * @return the value of the tag 
   * @throws RuntimeException in case of errors in the received Json messages or when
   *         the class to which the value shall be casted is unknown to the system.
   * @see cern.c2mon.shared.client.tag.TagValueUpdate#getValue()
   */
  @Override
  public final synchronized Object getValue()  {    
    if (!tagValueDeserialized && valueClassName != null && tagValue != null) {
      if (valueClassName.equals("java.lang.String")) {
        tagValueAsObject = tagValue;
        tagValueDeserialized = true;
      } else {
        //use Gson to convert numerical string to class
        try {
          String tagValueStr = (String) tagValue;
          Class< ? > valueClass = Class.forName(valueClassName);  
          JsonReader jsonReader = new JsonReader(new StringReader(tagValueStr));
          jsonReader.setLenient(true);
          tagValueAsObject =  getGson().fromJson(jsonReader, valueClass);
          tagValueDeserialized = true;
        }
        catch (JsonSyntaxException e) {
          String errorMsg = "Error while deserializing tag value.";
          LOG.error("getValue() - " + errorMsg, e);
          throw new RuntimeException(errorMsg, e);
        }
        catch (ClassNotFoundException e) {
          String errorMsg = "Could not find " + valueClassName + " to deserialize the tag value.";
          LOG.error("getValue() - " + errorMsg);
          throw new RuntimeException(errorMsg, e);
        }
      }      
    }
      
    return tagValueAsObject;
  }
  
  @Override
  public TagMode getMode() {
    return mode;
  }
  
  /**
   * Sets or removes the simulated flag of the tag
   * @param simulated <code>true</code>, if tag value is currently simulated.
   */
  public void setSimulated(final boolean simulated) {
    this.simulated = simulated;
  }
  
  @Override
  public boolean isSimulated() {
    return simulated;
  }
  
  /**
   * Generates out of this class instance a JSON message
   * @return The serialized JSON representation of this class instance
   */
  public final String toJson() {    
    return getGson().toJson(this);
  }
  
  /**
   * Deserialized the JSON string into a <code>TransferTagValue</code> object instance
   * @param json A JSON string representation of a <code>TransferTagValueImpl</code> class
   * @return The deserialized <code>TransferTagValue</code> instance of the JSON message
   */
  public static TagValueUpdate fromJson(final String json) {
    JsonReader jsonReader = new JsonReader(new StringReader(json));
    jsonReader.setLenient(true);
    return getGson().fromJson(jsonReader, TransferTagValueImpl.class);
  }

  @Override
  public String getValueDescription() {
    return valueDescription;
  }  
  

  /**
   * For testing only.
   * @return the valueClassName
   */
  String getValueClassName() {
    return valueClassName;
  }
}
