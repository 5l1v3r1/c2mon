#!/bin/bash
#
# Starts a single, non-clustered server without Ehcache persistence
#

# check if JAVA_HOME is set
[[ -z "$JAVA_HOME" ]] && echo -n "[ERROR] No JAVA_HOME set!"; exit 1

# check if C2MON_HOME is set
[[ -z "$C2MON_HOME" ]] && echo -n "[ERROR] No C2MON_HOME set!"; exit 1

# Initialise classpath
CLASSPATH=`ls $C2MON_HOME/lib/*.jar | tr -s '\n' ':'`
cd $C2MON_HOME

JVM_MEM="-Xms256M -Xmx256M"
JVM_OTHER_OPTS=(-XX:NewRatio=3 -XX:+PrintGCDetails -XX:+UseParallelGC -XX:MaxGCPauseMillis=100)

# if $REMOTE_DEBUG_ENABLED variable is set, we allow connecting to the server process with the remote debugger
if [ -n "${REMOTE_DEBUG_ENABLED+set}" ] ; then
    JVM_OTHER_OPTS+=(-Xdebug)
    JVM_OTHER_OPTS+=(-Xnoagent)
    JVM_OTHER_OPTS+=(-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044)
fi

# if $C2MON_RECOVERY_ENABLED is set, we add C2MON recovery option
[[ -n "${C2MON_RECOVERY_ENABLED+set}" ]] && JVM_OTHER_OPTS+=(-Dc2mon.recovery=true)


exec -a `basename $0` $JAVA_HOME/bin/java -cp "$CLASSPATH" -Dc2mon.home="$C2MON_HOME" $JVM_MEM "${JVM_OTHER_OPTS[@]}" cern.c2mon.server.lifecycle.ServerStartup
